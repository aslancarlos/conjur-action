name: conjur-action

on:
  workflow_call:
    secrets:
      sql_username:
        description: 'CONJUR SECRET SQL USERNAME'
        required: true
      sql_password:
        description: 'CONJUR SECRET SQL PASSWORD'
        required: true
  push:
    branches:
      - master
  pull_request:

jobs:
  authn-jwt:
    runs-on: self-hosted
    
    permissions:
      id-token: 'write'
      contents: 'read'

    steps:
      - uses: actions/checkout@v1
      
      - name: Use CyberArk Conjur Secret Fetcher Action w/ GitHub JWT
        id: conjur-secrets
        uses: ./  # Repositório local ou ação personalizada
        with:
          url: https://latamlab.secretsmgr.cyberark.cloud/api
          account: conjur
          authn_id: github
          secrets: data/vault/dev-demo-cred/appuser_db/username|SQL_USERNAME;data/vault/dev-demo-cred/appuser_db/password|SQL_PASSWORD

      - name: Check SQL_USERNAME Outside Docker Container for Secret Masking
        run: printenv SQL_USERNAME | sed 's/./& /g'
        
      - name: Check SQL_PASSWORD Outside Docker Container for Secret Masking
        run: printenv SQL_PASSWORD | sed 's/./& /g'
        
      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

  check_mysql:
    runs-on: self-hosted
    needs: authn-jwt
    
    permissions:
      id-token: 'write'
      contents: 'read'

    steps:
      - uses: actions/checkout@v1
    check_mysql:
      runs-on: self-hosted
      needs: authn-jwt

      permissions:
        id-token: 'write'
        contents: 'read'

    steps:
    - uses: actions/checkout@v1

    - name: Use CyberArk Conjur Secret Fetcher Action w/ GitHub JWT
      id: conjur-secrets
      uses: ./  # Repositório local ou ação personalizada
      with:
        url: https://latamlab.secretsmgr.cyberark.cloud/api
        account: conjur
        authn_id: github
        secrets: data/vault/dev-demo-cred/appuser_db/username|SQL_USERNAME;data/vault/dev-demo-cred/appuser_db/password|SQL_PASSWORD

    - name: Capture Secrets from Conjur
      id: capture-secrets
      run: |
        echo "SQL_USERNAME=$(printenv SQL_USERNAME)" >> $GITHUB_ENV
        echo "SQL_PASSWORD=$(printenv SQL_PASSWORD)" >> $GITHUB_ENV
      env:
        SQL_USERNAME: ${{ steps.conjur-secrets.outputs.SQL_USERNAME }}
        SQL_PASSWORD: ${{ steps.conjur-secrets.outputs.SQL_PASSWORD }}

    - name: Check SQL_USERNAME Outside Docker Container for Secret Masking
      run: printenv SQL_USERNAME | sed 's/./& /g'

    - name: Check SQL_PASSWORD Outside Docker Container for Secret Masking
      run: printenv SQL_PASSWORD | sed 's/./& /g'

    - name: Check MySQL Connection
      run: |
        echo "Verificando conexão com o banco de dados..."
        echo "Usando usuário: $SQL_USERNAME"
        mysql -h 10.78.10.171 -u "$SQL_USERNAME" -p"$SQL_PASSWORD" -e "SHOW PROCESSLIST;" || exit 1

    - name: Use Custom Print Secrets Action
      uses: ./.github/actions/print-secrets
      with:
        cx_client_id: ${{ env.SQL_USERNAME }}
        cx_client_secret: ${{ env.SQL_PASSWORD }}

